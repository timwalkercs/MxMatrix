// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MxMatrix.Server.Data;

#nullable disable

namespace MxMatrix.Server.Migrations
{
    [DbContext(typeof(DbContextEF))]
    partial class DbContextEFModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Descriptor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("descriptor_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("descriptors", "SwitchSchema");
                });

            modelBuilder.Entity("MxMatrix.Server.Models.MxSwitch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("switch_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ActuationForce")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("actuation_force");

                    b.Property<string>("BottomHousingMaterial")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("bottom_housing_material");

                    b.Property<decimal?>("BottomOutForce")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("bottom_out_force");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("brand");

                    b.Property<bool>("FactoryLubed")
                        .HasColumnType("bit")
                        .HasColumnName("factory_lubed");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image_url");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("manufacturer");

                    b.Property<string>("MountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("mount_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal?>("PreTravel")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("pre_travel");

                    b.Property<bool>("Silent")
                        .HasColumnType("bit")
                        .HasColumnName("silent");

                    b.Property<string>("SpringDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("spring_description");

                    b.Property<string>("StemConstruction")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("stem_construction");

                    b.Property<string>("StemMaterial")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("stem_material");

                    b.Property<string>("TopHousingMaterial")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("top_housing_material");

                    b.Property<decimal?>("TotalTravel")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_travel");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("switches", "SwitchSchema");
                });

            modelBuilder.Entity("SwitchDescriptor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DescriptorId")
                        .HasColumnType("int")
                        .HasColumnName("descriptor_id");

                    b.Property<int>("SwitchId")
                        .HasColumnType("int")
                        .HasColumnName("switch_id");

                    b.HasKey("Id");

                    b.HasIndex("DescriptorId");

                    b.HasIndex("SwitchId");

                    b.ToTable("switch_descriptors", "SwitchSchema");
                });

            modelBuilder.Entity("SwitchDescriptor", b =>
                {
                    b.HasOne("Descriptor", "Descriptor")
                        .WithMany("SwitchDescriptors")
                        .HasForeignKey("DescriptorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MxMatrix.Server.Models.MxSwitch", "Switch")
                        .WithMany("SwitchDescriptors")
                        .HasForeignKey("SwitchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Descriptor");

                    b.Navigation("Switch");
                });

            modelBuilder.Entity("Descriptor", b =>
                {
                    b.Navigation("SwitchDescriptors");
                });

            modelBuilder.Entity("MxMatrix.Server.Models.MxSwitch", b =>
                {
                    b.Navigation("SwitchDescriptors");
                });
#pragma warning restore 612, 618
        }
    }
}
